{"ast":null,"code":"import _initializerDefineProperty from \"/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _classCallCheck from \"/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _applyDecoratedDescriptor from \"/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3;\n\nimport { observable, action, computed, ObservableMap, toJS as _toJS } from 'mobx';\nimport Model from './Model';\nimport moment from 'moment';\nvar Collection = (_class =\n/*#__PURE__*/\nfunction () {\n  function Collection(store, view) {\n    _classCallCheck(this, Collection);\n\n    _initializerDefineProperty(this, \"items\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"_lastUpdateAt\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"_status\", _descriptor3, this);\n\n    this._lastUpdateAt = moment('1900-01-01');\n    this._status = 'empty';\n    this._store = store;\n    this.view = view;\n  }\n  /**\n   * Returns a JSON representation\n   * of the collection\n   */\n\n\n  _createClass(Collection, [{\n    key: \"toJS\",\n    value: function toJS() {\n      return _toJS(this.items);\n    }\n    /**\n     * Returns a shallow array representation\n     * of the collection\n     */\n\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      var arr = [];\n      this.items.forEach(function (i) {\n        return arr.push(i);\n      });\n      return arr;\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this._status == 'empty' || this._status == 'first-load';\n    }\n  }, {\n    key: \"isBusy\",\n    value: function isBusy() {\n      return this._status == 'busy' || this._status == 'first-load';\n    }\n  }, {\n    key: \"isOk\",\n    value: function isOk() {\n      return this._status == 'ok';\n    }\n  }, {\n    key: \"isError\",\n    value: function isError() {\n      return this._status == 'error';\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.items.clear();\n    }\n  }, {\n    key: \"find\",\n    value: function find(id) {\n      return this.items.get(id.toString());\n    }\n  }, {\n    key: \"beginUpdate\",\n    value: function beginUpdate() {\n      this._status = this._status == 'empty' ? 'first-load' : 'busy';\n    }\n  }, {\n    key: \"endUpdate\",\n    value: function endUpdate(error) {\n      if (error) {\n        this._error = error;\n        this._status = 'error';\n      } else {\n        this._status = 'ok';\n        this.collectionDidUpdate();\n      }\n\n      if (this._onUpdateCallback) {\n        this._onUpdateCallback(this, error);\n\n        this._onUpdateCallback = null;\n      }\n\n      this._lastUpdateAt = moment();\n    }\n  }, {\n    key: \"needsUpdate\",\n    value: function needsUpdate() {\n      if (this._status == 'busy') return false;\n      return this._status == 'empty' || moment().diff(this._lastUpdateAt, 'minutes') > this._store.updateThreshold; // this should be parametrized\n    }\n  }, {\n    key: \"addOrUpdateModel\",\n    value: function addOrUpdateModel(model) {\n      if (this.items.has(model.id.toString())) {\n        var storedModel = this.items.get(model.id.toString()); //update stored model\n\n        storedModel.set(model.attributes);\n        storedModel.endUpdate();\n        return storedModel;\n      } else {\n        this.add(model);\n        model.endUpdate();\n        return model;\n      }\n    }\n  }, {\n    key: \"collectionDidUpdate\",\n    value: function collectionDidUpdate() {\n      this.onCollectionUpdate && this.onCollectionUpdate();\n    }\n  }, {\n    key: \"andThen\",\n    value: function andThen(_callback) {\n      if (this.isOk()) {\n        _callback && _callback(this);\n        return this;\n      }\n\n      this._onUpdateCallback = _callback;\n      return this;\n    }\n  }, {\n    key: \"add\",\n    value: function add(model) {\n      this.items.set(model.id && model.id.toString(), model);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.items.clear();\n    }\n  }, {\n    key: \"getContextData\",\n    value: function getContextData() {\n      var result = this._store.viewData(this.view).toJSON();\n\n      return {\n        page: Number(result['x-page']),\n        total: Number(result['x-total']),\n        perPage: Number(result['x-per-page'])\n      };\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.items.size;\n    }\n  }, {\n    key: \"currentPage\",\n    get: function get() {\n      return this.getContextData().page;\n    }\n  }, {\n    key: \"totalRows\",\n    get: function get() {\n      return this.getContextData().total;\n    }\n  }, {\n    key: \"perPageRows\",\n    get: function get() {\n      return this.getContextData().perPage;\n    }\n  }, {\n    key: \"totalPages\",\n    get: function get() {\n      var cd = this.getContextData();\n      return Math.ceil(cd.total / cd.perPage);\n    }\n  }, {\n    key: \"hasNextPage\",\n    get: function get() {\n      return this.currentPage < this.totalPages;\n    }\n  }]);\n\n  return Collection;\n}(), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"items\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return new Map();\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"_lastUpdateAt\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"_status\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _applyDecoratedDescriptor(_class.prototype, \"clear\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"clear\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"beginUpdate\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"beginUpdate\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"endUpdate\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"endUpdate\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"addOrUpdateModel\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"addOrUpdateModel\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"add\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"add\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"clear\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"clear\"), _class.prototype)), _class);\nexport { Collection as default };","map":{"version":3,"sources":["/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/src/lib/Collection.js"],"names":["observable","action","computed","ObservableMap","toJS","Model","moment","Collection","store","view","_lastUpdateAt","_status","_store","items","arr","forEach","i","push","clear","id","get","toString","error","_error","collectionDidUpdate","_onUpdateCallback","diff","updateThreshold","model","has","storedModel","set","attributes","endUpdate","add","onCollectionUpdate","_callback","isOk","result","viewData","toJSON","page","Number","total","perPage","size","getContextData","cd","Math","ceil","currentPage","totalPages","Map"],"mappings":";;;;;;;;AACA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,QAA7B,EAAuCC,aAAvC,EAAsDC,IAAI,IAAJA,KAAtD,QAAkE,MAAlE;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA,OAAOC,MAAP,MAAmB,QAAnB;IAEqBC,U;;;AAanB,sBAAaC,KAAb,EAAoBC,IAApB,EAA0B;AAAA;;AAAA;;AAAA;;AAAA;;AACxB,SAAKC,aAAL,GAAqBJ,MAAM,CAAC,YAAD,CAA3B;AACA,SAAKK,OAAL,GAAe,OAAf;AAEA,SAAKC,MAAL,GAAcJ,KAAd;AAEA,SAAKC,IAAL,GAAYA,IAAZ;AACD;AAED;;;;;;;;2BAIQ;AACN,aAAOL,KAAI,CAAC,KAAKS,KAAN,CAAX;AACD;AAED;;;;;;;8BAIW;AACT,UAAIC,GAAG,GAAG,EAAV;AAEA,WAAKD,KAAL,CAAWE,OAAX,CAAoB,UAAAC,CAAC;AAAA,eAAIF,GAAG,CAACG,IAAJ,CAASD,CAAT,CAAJ;AAAA,OAArB;AAEA,aAAOF,GAAP;AACD;;;8BAMS;AACR,aAAO,KAAKH,OAAL,IAAgB,OAAhB,IAA2B,KAAKA,OAAL,IAAgB,YAAlD;AACD;;;6BAEQ;AACP,aAAO,KAAKA,OAAL,IAAgB,MAAhB,IAA0B,KAAKA,OAAL,IAAgB,YAAjD;AACD;;;2BAEM;AACL,aAAO,KAAKA,OAAL,IAAgB,IAAvB;AACD;;;8BAES;AACR,aAAO,KAAKA,OAAL,IAAgB,OAAvB;AACD;;;4BAIO;AACN,WAAKE,KAAL,CAAWK,KAAX;AACD;;;yBAEMC,E,EAAK;AACV,aAAO,KAAKN,KAAL,CAAWO,GAAX,CAAeD,EAAE,CAACE,QAAH,EAAf,CAAP;AACD;;;kCAIa;AACZ,WAAKV,OAAL,GAAe,KAAKA,OAAL,IAAgB,OAAhB,GAA0B,YAA1B,GAAyC,MAAxD;AACD;;;8BAGSW,K,EAAO;AACf,UAAKA,KAAL,EAAa;AACX,aAAKC,MAAL,GAAeD,KAAf;AACA,aAAKX,OAAL,GAAe,OAAf;AACD,OAHD,MAIK;AACH,aAAKA,OAAL,GAAe,IAAf;AACA,aAAKa,mBAAL;AACD;;AAED,UAAK,KAAKC,iBAAV,EAA8B;AAC5B,aAAKA,iBAAL,CAAuB,IAAvB,EAA6BH,KAA7B;;AACA,aAAKG,iBAAL,GAAyB,IAAzB;AACD;;AAED,WAAKf,aAAL,GAAqBJ,MAAM,EAA3B;AACD;;;kCAEa;AACZ,UAAK,KAAKK,OAAL,IAAgB,MAArB,EAA8B,OAAO,KAAP;AAE9B,aAAO,KAAKA,OAAL,IAAgB,OAAhB,IAA2BL,MAAM,GAAGoB,IAAT,CAAe,KAAKhB,aAApB,EAAmC,SAAnC,IAAiD,KAAKE,MAAL,CAAYe,eAA/F,CAHY,CAGoG;AACjH;;;qCAGgBC,K,EAAO;AAEtB,UAAK,KAAKf,KAAL,CAAWgB,GAAX,CAAeD,KAAK,CAACT,EAAN,CAASE,QAAT,EAAf,CAAL,EAA2C;AACzC,YAAIS,WAAW,GAAG,KAAKjB,KAAL,CAAWO,GAAX,CAAeQ,KAAK,CAACT,EAAN,CAASE,QAAT,EAAf,CAAlB,CADyC,CAGzC;;AACAS,QAAAA,WAAW,CAACC,GAAZ,CAAiBH,KAAK,CAACI,UAAvB;AACAF,QAAAA,WAAW,CAACG,SAAZ;AAEA,eAAOH,WAAP;AACD,OARD,MASK;AAEH,aAAKI,GAAL,CAASN,KAAT;AACAA,QAAAA,KAAK,CAACK,SAAN;AAEA,eAAOL,KAAP;AACD;AACF;;;0CAEqB;AACpB,WAAKO,kBAAL,IAA2B,KAAKA,kBAAL,EAA3B;AACD;;;4BAGQC,S,EAAY;AAEnB,UAAK,KAAKC,IAAL,EAAL,EAAmB;AACjBD,QAAAA,SAAS,IAAIA,SAAS,CAAC,IAAD,CAAtB;AACA,eAAO,IAAP;AACD;;AAED,WAAKX,iBAAL,GAAyBW,SAAzB;AAEA,aAAO,IAAP;AACD;;;wBAGGR,K,EAAO;AACT,WAAKf,KAAL,CAAWkB,GAAX,CAAgBH,KAAK,CAACT,EAAN,IAAYS,KAAK,CAACT,EAAN,CAASE,QAAT,EAA5B,EAAiDO,KAAjD;AACD;;;4BAIO;AACN,WAAKf,KAAL,CAAWK,KAAX;AACD;;;qCAIgB;AACf,UAAIoB,MAAM,GAAG,KAAK1B,MAAL,CAAY2B,QAAZ,CAAqB,KAAK9B,IAA1B,EAAgC+B,MAAhC,EAAb;;AAEA,aAAO;AACLC,QAAAA,IAAI,EAAEC,MAAM,CAACJ,MAAM,CAAC,QAAD,CAAP,CADP;AAELK,QAAAA,KAAK,EAAED,MAAM,CAACJ,MAAM,CAAC,SAAD,CAAP,CAFR;AAGLM,QAAAA,OAAO,EAAEF,MAAM,CAACJ,MAAM,CAAC,YAAD,CAAP;AAHV,OAAP;AAKD;;;wBAxHY;AACX,aAAO,KAAKzB,KAAL,CAAWgC,IAAlB;AACD;;;wBAwHiB;AAChB,aAAO,KAAKC,cAAL,GAAsBL,IAA7B;AACD;;;wBAEe;AACd,aAAO,KAAKK,cAAL,GAAsBH,KAA7B;AACD;;;wBAEiB;AAChB,aAAO,KAAKG,cAAL,GAAsBF,OAA7B;AACD;;;wBAEgB;AACf,UAAMG,EAAE,GAAG,KAAKD,cAAL,EAAX;AACA,aAAOE,IAAI,CAACC,IAAL,CAAUF,EAAE,CAACJ,KAAH,GAAWI,EAAE,CAACH,OAAxB,CAAP;AACD;;;wBAEiB;AAChB,aAAO,KAAKM,WAAL,GAAmB,KAAKC,UAA/B;AACD;;;;0EAtLAnD,U;;;;;WAAmB,IAAIoD,GAAJ,E;;iFACnBpD,U;;;;;2EACAA,U;;;;;0DA4DAC,M,8IAUAA,M,kJAKAA,M,uJAyBAA,M,iJAsCAA,M,sIAMAA,M;SAnJkBM,U","sourcesContent":["\nimport { observable, action, computed, ObservableMap, toJS } from 'mobx';\nimport Model from './Model';\n\nimport moment from 'moment';\n\nexport default class Collection {\n  @observable items = new Map();\n  @observable _lastUpdateAt;\n  @observable _status; // empty | first-load | busy | ok | error\n\n  _store;\n  _error;\n  _onUpdateCallback;\n\n  onCollectionUpdate;\n\n  view;\n\n  constructor (store, view) {\n    this._lastUpdateAt = moment('1900-01-01');\n    this._status = 'empty';\n\n    this._store = store;\n\n    this.view = view;\n  }\n\n  /**\n   * Returns a JSON representation\n   * of the collection\n   */\n  toJS () {\n    return toJS(this.items);\n  }\n\n  /**\n   * Returns a shallow array representation\n   * of the collection\n   */\n  toArray () {\n    let arr = [];\n\n    this.items.forEach( i => arr.push(i) );\n\n    return arr;\n  }\n\n  get length() {\n    return this.items.size;\n  }\n\n  isEmpty() {\n    return this._status == 'empty' || this._status == 'first-load';\n  }\n\n  isBusy() {\n    return this._status == 'busy' || this._status == 'first-load';\n  }\n\n  isOk() {\n    return this._status == 'ok';\n  }\n\n  isError() {\n    return this._status == 'error';\n  }\n\n\n  @action\n  clear() {\n    this.items.clear();\n  }\n\n  find ( id ) {\n    return this.items.get(id.toString());\n  }\n\n\n  @action\n  beginUpdate() {\n    this._status = this._status == 'empty' ? 'first-load' : 'busy';\n  }\n\n  @action\n  endUpdate(error) {\n    if ( error ) {\n      this._error  = error;\n      this._status = 'error'; \n    }\n    else {\n      this._status = 'ok';\n      this.collectionDidUpdate();\n    }\n\n    if ( this._onUpdateCallback ) {\n      this._onUpdateCallback(this, error);\n      this._onUpdateCallback = null;\n    }\n\n    this._lastUpdateAt = moment();\n  }\n\n  needsUpdate() {\n    if ( this._status == 'busy' ) return false;\n\n    return this._status == 'empty' || moment().diff( this._lastUpdateAt, 'minutes' ) > this._store.updateThreshold; // this should be parametrized\n  }\n\n  @action\n  addOrUpdateModel(model) {\n\n    if ( this.items.has(model.id.toString()) ) {\n      let storedModel = this.items.get(model.id.toString());\n\n      //update stored model\n      storedModel.set( model.attributes );\n      storedModel.endUpdate();\n\n      return storedModel;\n    }\n    else {\n\n      this.add(model);\n      model.endUpdate();\n\n      return model;\n    }\n  }\n\n  collectionDidUpdate() {\n    this.onCollectionUpdate && this.onCollectionUpdate();\n  }  \n\n\n  andThen( _callback ) {\n\n    if ( this.isOk() ) {\n      _callback && _callback(this);\n      return this;\n    }\n\n    this._onUpdateCallback = _callback;\n\n    return this;\n  }\n\n  @action\n  add(model) {\n    this.items.set( model.id && model.id.toString(), model );\n  }\n\n\n  @action\n  clear() {\n    this.items.clear();\n  }\n\n\n\n  getContextData() {\n    let result = this._store.viewData(this.view).toJSON();\n\n    return {\n      page: Number(result['x-page']),\n      total: Number(result['x-total']),\n      perPage: Number(result['x-per-page']),\n    };\n  }\n\n  get currentPage() {\n    return this.getContextData().page;\n  }\n\n  get totalRows() {\n    return this.getContextData().total;\n  }\n\n  get perPageRows() {\n    return this.getContextData().perPage;\n  }\n\n  get totalPages() {\n    const cd = this.getContextData();\n    return Math.ceil(cd.total / cd.perPage);\n  }\n\n  get hasNextPage() {\n    return this.currentPage < this.totalPages;\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module"}