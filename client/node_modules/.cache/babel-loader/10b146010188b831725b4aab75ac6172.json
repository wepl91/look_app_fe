{"ast":null,"code":"import _classCallCheck from \"/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _applyDecoratedDescriptor from \"/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\n\nvar _class;\n\nimport { Model } from '../lib';\nimport { action, computed } from 'mobx';\nimport moment from 'moment';\nimport startCase from 'lodash/startCase';\nvar Appointment = (_class =\n/*#__PURE__*/\nfunction (_Model) {\n  _inherits(Appointment, _Model);\n\n  function Appointment(attributes, store) {\n    _classCallCheck(this, Appointment);\n\n    var defaultAttributes = {\n      branch: {\n        professionals: [],\n        services: [],\n        users: []\n      },\n      status: \"OPEN\",\n      professional: null,\n      client: null,\n      dayHour: moment(),\n      services: []\n    };\n    var attrs = Object.assign(defaultAttributes, attributes);\n    return _possibleConstructorReturn(this, _getPrototypeOf(Appointment).call(this, attrs, store));\n  }\n\n  _createClass(Appointment, [{\n    key: \"afterSetData\",\n    value: function afterSetData() {\n      if (this.dayHour) {\n        this.dayHour = moment(this.dayHour);\n      }\n    }\n  }, {\n    key: \"setStatus\",\n    value: function setStatus(status) {\n      this.beginUpdate();\n      this.status.name = status;\n      this.endUpdate();\n      return this;\n    }\n  }, {\n    key: \"pay\",\n    value: function pay() {\n      return this.appStore.APIClient.sendRequest(\"/appointments/\".concat(this.id, \"/paid\"), 'POST');\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      return this.appStore.APIClient.sendRequest(\"/appointments/\".concat(this.id, \"/cancel\"), 'POST');\n    }\n  }, {\n    key: \"pay\",\n    value: function pay() {\n      return this.appStore.APIClient.sendRequest(\"/appointments/\".concat(this.id, \"/paid\"), 'POST');\n    }\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      if (this.client instanceof Object) {\n        this.client = this.client.id;\n      }\n\n      if (this.professional instanceof Object) {\n        this.professional = this.professional.id;\n      }\n\n      var cleanServices = [];\n      this.services.forEach(function (service) {\n        if (service instanceof Object) {\n          cleanServices.push(service.id);\n        } else {\n          cleanServices.push(service);\n        }\n      });\n      this.services = cleanServices;\n      return this;\n    }\n  }, {\n    key: \"clientFullName\",\n    get: function get() {\n      if (!this.client) {\n        return '';\n      }\n\n      return \"\".concat(startCase(this.client.name), \" \").concat(startCase(this.client.lastname));\n    }\n  }, {\n    key: \"clientPoints\",\n    get: function get() {\n      if (!this.client) {\n        return '';\n      }\n\n      return this.client.points;\n    }\n  }, {\n    key: \"professionalFullName\",\n    get: function get() {\n      if (!this.professional) {\n        return '';\n      }\n\n      return \"\".concat(startCase(this.professional.name), \" \").concat(startCase(this.professional.lastName));\n    }\n  }, {\n    key: \"clientID\",\n    get: function get() {\n      if (!this.client) {\n        return '';\n      }\n\n      return this.client.id;\n    }\n  }, {\n    key: \"totalPrice\",\n    get: function get() {\n      var total = 0;\n\n      if (!this.services || this.services.length == 0) {\n        return 0;\n      }\n\n      this.services.map(function (service) {\n        return total += parseInt(service.price);\n      });\n      return total;\n    }\n  }, {\n    key: \"isOpen\",\n    get: function get() {\n      return this.status.name === 'OPEN';\n    }\n  }, {\n    key: \"isPaid\",\n    get: function get() {\n      return this.status.name === 'PAID';\n    }\n  }, {\n    key: \"isCancelled\",\n    get: function get() {\n      return this.status.name === 'CANCELED';\n    }\n  }, {\n    key: \"isExpired\",\n    get: function get() {\n      return this.status.name === 'EXPIRED';\n    }\n  }, {\n    key: \"statusClassName\",\n    get: function get() {\n      var classNames = {\n        'OPEN': 'open',\n        'PAID': 'approved',\n        'CANCELED': 'cancelled',\n        'EXPIRED': 'cancelled'\n      };\n      return classNames[this.status.name];\n    }\n  }, {\n    key: \"cookedStatus\",\n    get: function get() {\n      var statuses = {\n        'OPEN': 'Activo',\n        'PAID': 'Pagado',\n        'CANCELED': 'Cancelado',\n        'EXPIRED': 'Ausente'\n      };\n      return statuses[this.status.name];\n    }\n  }, {\n    key: \"beginningTime\",\n    get: function get() {\n      return this.dayHour.format(\"HH:mm\");\n    }\n  }, {\n    key: \"finishTime\",\n    get: function get() {\n      var totalDuration = 0;\n      this.services.map(function (service) {\n        return totalDuration += service.duration;\n      });\n      return moment(this.dayHour).add(totalDuration, 'minutes').format(\"HH:mm\");\n    }\n  }, {\n    key: \"servicesIds\",\n    get: function get() {\n      var ret = [];\n      this.services.map(function (service) {\n        return ret.push(service.id);\n      });\n      return ret;\n    }\n  }]);\n\n  return Appointment;\n}(Model), (_applyDecoratedDescriptor(_class.prototype, \"setStatus\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setStatus\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"clientFullName\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"clientFullName\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"clientPoints\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"clientPoints\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"professionalFullName\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"professionalFullName\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"clientID\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"clientID\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"totalPrice\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"totalPrice\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isOpen\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isOpen\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isPaid\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isPaid\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isCancelled\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isCancelled\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isExpired\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isExpired\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"statusClassName\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"statusClassName\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"pay\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"pay\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"cancel\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"cancel\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"pay\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"pay\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"clean\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"clean\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"cookedStatus\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"cookedStatus\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"beginningTime\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"beginningTime\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"finishTime\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"finishTime\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"servicesIds\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"servicesIds\"), _class.prototype)), _class);\nexport { Appointment as default };","map":{"version":3,"sources":["/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/src/models/Appointment.js"],"names":["Model","action","computed","moment","startCase","Appointment","attributes","store","defaultAttributes","branch","professionals","services","users","status","professional","client","dayHour","attrs","Object","assign","beginUpdate","name","endUpdate","appStore","APIClient","sendRequest","id","cleanServices","forEach","service","push","lastname","points","lastName","total","length","map","parseInt","price","classNames","statuses","format","totalDuration","duration","add","ret"],"mappings":"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","sourcesContent":["import { Model } from '../lib';\n\nimport {\n  action,\n  computed,\n} from 'mobx'\n\nimport moment from 'moment';\nimport startCase from 'lodash/startCase';\n\nexport default class Appointment extends Model {\n  constructor( attributes, store ) {\n\n    let defaultAttributes = {\n      branch: {\n        professionals: [],\n        services: [],\n        users: [],\n      },\n      status: \"OPEN\",\n      professional: null,\n      client: null,\n      dayHour: moment(),\n      services: [], \n    };\n    \n    let attrs = Object.assign( defaultAttributes, attributes );\n    \n    super(attrs, store);\n    \n  }\n  \n  afterSetData() {\n    if (this.dayHour) {\n      this.dayHour = moment(this.dayHour);\n    }\n  }\n\n  @action\n  setStatus( status ) {\n    this.beginUpdate();\n    this.status.name = status;\n    this.endUpdate();\n    return this;  \n  }\n\n  @computed\n  get clientFullName() {\n    if (!this.client) {\n      return '';\n    }\n    return `${ startCase(this.client.name) } ${ startCase(this.client.lastname) }`\n  }\n\n  @computed\n  get clientPoints() {\n    if (!this.client) {\n      return '';\n    }\n    return this.client.points\n  }\n\n  @computed\n  get professionalFullName() {\n    if (!this.professional) {\n      return '';\n    }\n    return `${ startCase(this.professional.name) } ${ startCase(this.professional.lastName) }`;\n  }\n\n  @computed\n  get clientID() {\n    if (!this.client) {\n      return '';\n    }\n    return this.client.id\n  }\n\n  @computed\n  get totalPrice() {\n    let total = 0;\n    if (!this.services || this.services.length == 0) {\n      return 0;\n    }\n\n    this.services.map( service => ( total += parseInt(service.price) ));\n    return total;\n  }\n\n  @computed\n  get isOpen() {\n    return this.status.name === 'OPEN';\n  }\n\n  @computed\n  get isPaid() {\n    return this.status.name === 'PAID';\n  }\n\n  @computed\n  get isCancelled() {\n    return this.status.name === 'CANCELED';\n  }\n\n  @computed\n  get isExpired() {\n    return this.status.name === 'EXPIRED';\n  }\n\n  @computed\n  get statusClassName() {\n    const classNames = {\n      'OPEN': 'open',\n      'PAID': 'approved',\n      'CANCELED': 'cancelled',\n      'EXPIRED': 'cancelled'\n    }\n    return classNames[this.status.name];\n  }\n\n  @action\n  pay() {\n    return this.appStore.APIClient.sendRequest(`/appointments/${ this.id }/paid`, 'POST')\n  }\n\n  @action\n  cancel() {\n    return this.appStore.APIClient.sendRequest(`/appointments/${ this.id }/cancel`, 'POST');\n  }\n\n  @action\n  pay() {\n    return this.appStore.APIClient.sendRequest(`/appointments/${ this.id }/paid`, 'POST')\n  }\n\n  @action \n  clean() {\n    if (this.client instanceof Object) {\n      this.client = this.client.id\n    }\n    if (this.professional instanceof Object) {\n      this.professional = this.professional.id;\n    }\n    const cleanServices = [];\n    this.services.forEach( service => {\n      if (service instanceof Object) {\n        cleanServices.push(service.id)\n      }\n      else {\n        cleanServices.push(service)\n      }\n    });\n    this.services = cleanServices;\n    return this;\n  }\n\n  @computed\n  get cookedStatus() {\n    const statuses = {\n      'OPEN': 'Activo',\n      'PAID': 'Pagado',\n      'CANCELED': 'Cancelado',\n      'EXPIRED': 'Ausente'\n    }\n    return statuses[this.status.name];\n  }\n\n  @computed\n  get beginningTime() {\n    return this.dayHour.format(\"HH:mm\")\n  }\n\n  @computed\n  get finishTime() {\n    let totalDuration = 0;\n    this.services.map( service => (totalDuration += service.duration));\n\n    return moment(this.dayHour).add(totalDuration, 'minutes').format(\"HH:mm\");\n  }\n\n  @computed\n  get servicesIds() {\n    const ret = [];\n    this.services.map( service => (ret.push(service.id)))\n    return ret;\n  }\n\n}"]},"metadata":{},"sourceType":"module"}