{"ast":null,"code":"import _defineProperty from \"/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\n\nvar _class,\n    _jsxFileName = \"/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/src/components/Users/UsersForm.jsx\";\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { observer } from 'mobx-react';\nimport { withStore } from '../../hocs';\nimport { nameRegex, mailRegex } from '../../lib/Regex';\nimport { Field, TextInput, Select } from 'shipnow-mercurio';\nimport { Columns, Column } from 'bloomer';\nimport { faChevronDown } from \"@fortawesome/free-solid-svg-icons\";\nimport { translate } from '../../lib/Translator';\n\nvar UsersForm = observer(_class =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(UsersForm, _Component);\n\n  function UsersForm(props) {\n    var _this;\n\n    _classCallCheck(this, UsersForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UsersForm).call(this, props));\n    _this.state = {\n      roles: null,\n      branches: null,\n      password: '',\n      repeatPassword: ''\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(UsersForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        roles: this.props.store.roles.search({}, 'roles-list-users-form', true),\n        branches: this.props.store.branches.search({}, 'branches-list-users-form', true)\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevState.repeatPassword != this.state.repeatPassword && this.state.repeatPassword == this.state.password) {\n        this.props.onChange('password', this.state.password);\n      }\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(sender, value, name, valid) {\n      if (name == 'password' || name == 'repeatPassword') {\n        this.setState(_defineProperty({}, name, value));\n      } else {\n        this.props.onChange && this.props.onChange(name, value, valid);\n      }\n    }\n  }, {\n    key: \"getRolesList\",\n    value: function getRolesList() {\n      var _this2 = this;\n\n      var roles = [];\n      this.state.roles.toArray().forEach(function (rol) {\n        roles.push({\n          key: _this2.getText(rol.name),\n          value: rol.id\n        });\n      });\n      return roles;\n    }\n  }, {\n    key: \"getText\",\n    value: function getText(text) {\n      return translate(text, this.props.store.ui.language);\n    }\n  }, {\n    key: \"renderSkeleton\",\n    value: function renderSkeleton() {\n      var withPassword = this.props.withPassword;\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(Field, {\n        label: this.getText(\"Nombre y Apellido\"),\n        labelNote: this.getText(\"¿Cómo se llama el nuevo usuario?\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(Columns, {\n        isGapless: true,\n        isMarginless: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(TextInput, {\n        name: \"name\",\n        placeholder: this.getText(\"Nombre..\"),\n        disabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      })), React.createElement(Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(TextInput, {\n        name: \"lastName\",\n        placeholder: this.getText(\"Apellido..\"),\n        disbaled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      })))), React.createElement(Field, {\n        label: \"Email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(TextInput, {\n        name: \"email\",\n        placeholder: \"user@gmail.com\",\n        disabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      })), React.createElement(Field, {\n        label: this.getText('Sucursla'),\n        labelNote: this.getText('¿En cuál sucursal va a trabajar el ususario?'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(Select, {\n        disabled: true,\n        name: \"branch\",\n        icon: faChevronDown,\n        borderless: true,\n        placeholder: this.getText('Sucursales'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      })), React.createElement(Field, {\n        label: this.getText(\"Rol\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(Select, {\n        maxHeight: \"110px\",\n        name: \"role\",\n        placeholder: \"Roles\",\n        borderless: true,\n        icon: faChevronDown,\n        disabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      })), withPassword && React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(Field, {\n        label: this.getText('Contraseña'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(TextInput, {\n        type: \"password\",\n        securityLevel: true,\n        disabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      })), React.createElement(Field, {\n        className: \"mt-3\",\n        label: this.getText('Confirmación de contraseña'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(TextInput, {\n        type: \"password\",\n        disabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }))));\n    }\n  }, {\n    key: \"getText\",\n    value: function getText(text) {\n      return translate(text, this.props.store.ui.language);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isRolesLoaded = this.state.roles && this.state.roles.isOk();\n      var isBranchesLoaded = this.state.branches && this.state.branches.isOk();\n\n      if (!isBranchesLoaded || !isRolesLoaded) {\n        return this.renderSkeleton();\n      }\n\n      var _this$props = this.props,\n          user = _this$props.user,\n          withPassword = _this$props.withPassword;\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(Field, {\n        label: this.getText(\"Nombre y Apellido\"),\n        labelNote: this.getText(\"¿Cómo se llama el nuevo usuario?\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, React.createElement(Columns, {\n        isGapless: true,\n        isMarginless: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, React.createElement(TextInput, {\n        value: user && user.cookedName,\n        validate: function validate(value) {\n          return nameRegex.test(value);\n        },\n        name: \"name\",\n        placeholder: this.getText(\"Nombre\"),\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      })), React.createElement(Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(TextInput, {\n        value: user && user.cookedLastname,\n        validate: function validate(value) {\n          return nameRegex.test(value);\n        },\n        name: \"lastName\",\n        placeholder: this.getText(\"Apellido\"),\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      })))), React.createElement(Field, {\n        label: this.getText('Email'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, React.createElement(TextInput, {\n        value: user && user.email,\n        name: \"email\",\n        validate: function validate(value) {\n          return mailRegex.test(value);\n        },\n        placeholder: \"user@gmail.com\",\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      })), React.createElement(Field, {\n        label: this.getText('Sucursla'),\n        labelNote: this.getText('¿En cuál sucursal va a trabajar el ususario?'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(Select, {\n        key: this.state.branches,\n        value: user && user.branch.id,\n        name: \"branch\",\n        icon: faChevronDown,\n        borderless: true,\n        placeholder: this.getText('Sucursales'),\n        onChange: this.handleChange,\n        options: this.state.branches.toArray().map(function (branch) {\n          return {\n            key: branch.name || branch.cookedAddress,\n            value: branch.id\n          };\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      })), React.createElement(Field, {\n        label: this.getText(\"Rol\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(Select, {\n        key: this.state.roles,\n        value: user && user.roleID,\n        name: \"role\",\n        placeholder: \"Roles\",\n        borderless: true,\n        icon: faChevronDown,\n        options: this.getRolesList(),\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      })), withPassword && React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, React.createElement(Field, {\n        label: this.getText('Contraseña'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, React.createElement(TextInput, {\n        name: \"password\",\n        type: \"password\",\n        securityLevel: true,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      })), React.createElement(Field, {\n        className: \"mt-3\",\n        label: this.getText('Confirmación de contraseña'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, React.createElement(TextInput, {\n        name: \"repeatPassword\",\n        type: \"password\",\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return UsersForm;\n}(Component)) || _class;\n\nUsersForm.PropTypes = {\n  user: PropTypes.object,\n  onChange: PropTypes.func,\n  withPassword: PropTypes.bool\n};\nUsersForm.defaultProps = {\n  user: null,\n  onChange: null,\n  withPassword: false\n};\nexport default withStore(UsersForm);","map":{"version":3,"sources":["/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/src/components/Users/UsersForm.jsx"],"names":["React","Component","PropTypes","observer","withStore","nameRegex","mailRegex","Field","TextInput","Select","Columns","Column","faChevronDown","translate","UsersForm","props","state","roles","branches","password","repeatPassword","handleChange","bind","setState","store","search","prevProps","prevState","onChange","sender","value","name","valid","toArray","forEach","rol","push","key","getText","id","text","ui","language","withPassword","isRolesLoaded","isOk","isBranchesLoaded","renderSkeleton","user","cookedName","test","cookedLastname","email","branch","map","cookedAddress","roleID","getRolesList","object","func","bool","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { observer } from 'mobx-react';\n\nimport { withStore } from '../../hocs';\n\nimport { nameRegex, mailRegex } from '../../lib/Regex'\n\nimport {\n  Field,\n  TextInput,\n  Select,\n} from 'shipnow-mercurio'\n\nimport {\n  Columns,\n  Column\n} from 'bloomer'\n\nimport { faChevronDown } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { translate } from '../../lib/Translator';\n\n@observer\nclass UsersForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      roles: null,\n      branches: null,\n      password: '',\n      repeatPassword: '',\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      roles: this.props.store.roles.search({}, 'roles-list-users-form', true),\n      branches: this.props.store.branches.search({}, 'branches-list-users-form', true),\n    })    \n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.repeatPassword != this.state.repeatPassword && (this.state.repeatPassword == this.state.password)) {\n      this.props.onChange('password', this.state.password);\n    } \n  }\n  \n\n  handleChange( sender, value, name, valid ) {\n    if (name == 'password' || name == 'repeatPassword') {\n      this.setState({\n        [name]: value\n      });\n    }\n    else {\n      this.props.onChange && this.props.onChange(name, value, valid);\n    }\n  }\n\n  getRolesList() {\n    const roles = [];\n    this.state.roles.toArray().forEach(rol => {\n      roles.push({\n        key: this.getText(rol.name),\n        value: rol.id\n      });\n    });\n    return roles;\n  }\n\n  getText( text ) {\n    return translate(text, this.props.store.ui.language)\n  }\n\n  renderSkeleton() {\n    const { withPassword } = this.props;\n    return(\n      <React.Fragment>\n        <Field label={this.getText(\"Nombre y Apellido\")} labelNote={this.getText(\"¿Cómo se llama el nuevo usuario?\")}>\n          <Columns isGapless isMarginless>\n            <Column>\n                <TextInput name=\"name\" placeholder={this.getText(\"Nombre..\")} disabled />\n            </Column>\n            <Column>\n                <TextInput name=\"lastName\" placeholder={this.getText(\"Apellido..\")} disbaled />\n            </Column>\n          </Columns>\n        </Field>\n        <Field label=\"Email\">\n          <TextInput name=\"email\" placeholder=\"user@gmail.com\" disabled />\n        </Field>\n        <Field label={ this.getText('Sucursla') } labelNote={ this.getText('¿En cuál sucursal va a trabajar el ususario?') }>\n          <Select \n            disabled\n            name=\"branch\"\n            icon={ faChevronDown } \n            borderless \n            placeholder={ this.getText('Sucursales') }\n          />\n        </Field>\n        <Field label={this.getText(\"Rol\")}>\n        <Select \n          maxHeight=\"110px\"\n          name=\"role\"\n          placeholder=\"Roles\" \n          borderless \n          icon={ faChevronDown } \n          disabled />\n        </Field>\n        { withPassword &&\n          <React.Fragment>\n            <Field label={ this.getText('Contraseña') }>\n              <TextInput type=\"password\" securityLevel disabled />\n            </Field>\n            <Field className=\"mt-3\" label={ this.getText('Confirmación de contraseña') }>\n              <TextInput type=\"password\" disabled />\n            </Field>\n          </React.Fragment> }\n      </React.Fragment> )\n  }\n\n  getText( text ) {\n    return translate(text, this.props.store.ui.language)\n  }\n\n  render() {\n    const isRolesLoaded = this.state.roles && this.state.roles.isOk();\n    const isBranchesLoaded = this.state.branches && this.state.branches.isOk();\n    if (!isBranchesLoaded || !isRolesLoaded) {\n      return this.renderSkeleton();\n    }\n    const { user, withPassword } = this.props;\n    return(\n      <React.Fragment>\n        <Field label={this.getText(\"Nombre y Apellido\")} labelNote={this.getText(\"¿Cómo se llama el nuevo usuario?\")}>\n          <Columns isGapless isMarginless>\n            <Column>\n                <TextInput value={ user && user.cookedName } validate={ (value) => (nameRegex.test(value)) } name=\"name\" placeholder={this.getText(\"Nombre\")} onChange={ this.handleChange } />\n            </Column>\n            <Column>\n                <TextInput value={ user && user.cookedLastname } validate={ (value) => (nameRegex.test(value)) } name=\"lastName\" placeholder={this.getText(\"Apellido\")} onChange={ this.handleChange } />\n            </Column>\n          </Columns>\n        </Field>\n        <Field label={ this.getText('Email') }>\n          <TextInput value={ user && user.email } name=\"email\" validate={ (value) => (mailRegex.test(value)) } placeholder=\"user@gmail.com\" onChange={ this.handleChange } />\n        </Field>\n        <Field label={ this.getText('Sucursla') } labelNote={ this.getText('¿En cuál sucursal va a trabajar el ususario?') }>\n          <Select \n            key={ this.state.branches }\n            value={ user && user.branch.id }\n            name=\"branch\"\n            icon={ faChevronDown } \n            borderless \n            placeholder={ this.getText('Sucursales') }\n            onChange={ this.handleChange }\n            options={ this.state.branches.toArray().map( branch => ({ key: branch.name || branch.cookedAddress, value: branch.id })) }\n          />\n        </Field>\n        <Field label={this.getText(\"Rol\")}>\n        <Select \n          key={ this.state.roles } \n          value={ user && user.roleID }\n          name=\"role\"\n          placeholder=\"Roles\" \n          borderless \n          icon={ faChevronDown } \n          options={ this.getRolesList() }\n          onChange={ this.handleChange } />\n        </Field>\n        { withPassword &&\n          <React.Fragment>\n            <Field label={ this.getText('Contraseña') }>\n              <TextInput name=\"password\" type=\"password\" securityLevel onChange={ this.handleChange } />\n            </Field>\n            <Field className=\"mt-3\" label={ this.getText('Confirmación de contraseña') }>\n              <TextInput name=\"repeatPassword\" type=\"password\" onChange={ this.handleChange } />\n            </Field>\n          </React.Fragment> }\n      </React.Fragment> )\n  }\n  \n}\n\nUsersForm.PropTypes = {\n  user: PropTypes.object,\n  onChange: PropTypes.func,\n  withPassword: PropTypes.bool,\n}\n\nUsersForm.defaultProps = {\n  user: null,\n  onChange: null,\n  withPassword: false,\n}\n\nexport default withStore(UsersForm);"]},"metadata":{},"sourceType":"module"}