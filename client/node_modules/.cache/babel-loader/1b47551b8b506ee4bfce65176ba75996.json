{"ast":null,"code":"import _classCallCheck from \"/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\n\nvar _class,\n    _jsxFileName = \"/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/src/components/Payments/PaymentForm.jsx\";\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './styles.css';\nimport { Field, Text, TextInput } from 'shipnow-mercurio';\nimport { Columns, Column } from 'bloomer';\nimport { withStore } from '../../hocs';\nimport { observer } from 'mobx-react';\nimport { translate } from '../../lib/Translator';\nimport { priceRegex } from '../../lib/Regex';\n\nvar PaymentForm = observer(_class =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PaymentForm, _Component);\n\n  function PaymentForm(props) {\n    var _this;\n\n    _classCallCheck(this, PaymentForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PaymentForm).call(this, props));\n    _this.state = {\n      paymentType: '',\n      cashHalf: 0,\n      pointsHalf: 0,\n      validSplitPayment: false\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(PaymentForm, [{\n    key: \"getText\",\n    value: function getText(text) {\n      return translate(text, this.props.store.ui.language);\n    }\n  }, {\n    key: \"handlePaymentType\",\n    value: function handlePaymentType(type) {\n      this.setState({\n        paymentType: type\n      });\n    } //ver como se agregan mensajes al validar algo\n\n  }, {\n    key: \"validateCashPayment\",\n    value: function validateCashPayment(value) {\n      return priceRegex.test(value) && value <= this.props.totalAmount;\n    }\n  }, {\n    key: \"validatePointsPayment\",\n    value: function validatePointsPayment(value) {\n      //una vez que tengamos conversion, validar que no se este excediendo del monto total\n      return priceRegex.test(value) && value <= this.props.clientPoints;\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(sender, value, name, valid) {\n      if (name == 'cashHalf') {\n        this.setState({\n          cashHalf: value\n        });\n      }\n\n      if (name == 'pointsHalf') {\n        this.setState({\n          pointsHalf: value\n        });\n      }\n\n      this.props.onChange && this.props.onChange(sender, value, name, valid);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevState.cashHalf != this.state.cashHalf || prevState.pointsHalf != this.state.pointsHalf) {\n        this.setState({\n          validSplitPayment: this.validateCashPayment(this.state.cashHalf) && this.validatePointsPayment(this.state.pointsHalf)\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(Field, {\n        label: this.getText('Tipo de pago'),\n        labelNote: this.getText('¿De qué manera desea realizar el pago?'),\n        size: \"lg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(Text, {\n        className: \"ml-1 mt-2\",\n        weight: \"medium\",\n        size: \"lg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        className: \"ml-1 mr-1\",\n        type: \"radio\",\n        value: \"loaned\",\n        onChange: function onChange() {\n          return _this2.handlePaymentType('loaned');\n        },\n        checked: this.state.paymentType == 'loaned',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }), this.getText('Fiado')), React.createElement(Text, {\n        className: \"ml-1 mt-2\",\n        size: \"lg\",\n        weight: \"medium\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        className: \"ml-1 mr-1\",\n        type: \"radio\",\n        value: \"cash\",\n        onChange: function onChange() {\n          return _this2.handlePaymentType('cash');\n        },\n        checked: this.state.paymentType == 'cash',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }), this.getText('Efectivo')), React.createElement(Text, {\n        className: \"ml-1 mt-2\",\n        size: \"lg\",\n        weight: \"medium\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        className: \"ml-1 mr-1\",\n        type: \"radio\",\n        value: \"points\",\n        onChange: function onChange() {\n          return _this2.handlePaymentType('points');\n        },\n        checked: this.state.paymentType == 'points',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }), this.getText('Puntos')), React.createElement(Text, {\n        className: \"ml-1 mt-2\",\n        size: \"lg\",\n        weight: \"medium\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        className: \"ml-1 mr-1\",\n        type: \"radio\",\n        value: \"cashAndPoints\",\n        onChange: function onChange() {\n          return _this2.handlePaymentType('cashAndPoints');\n        },\n        checked: this.state.paymentType == 'cashAndPoints',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }), this.getText('Efectivo y puntos'))), this.state.paymentType != '' && this.state.paymentType != 'loaned' && React.createElement(Field, {\n        label: this.getText('Ingrese los montos'),\n        labelNote: this.getText('¿Cuánto va abonar?'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, this.state.paymentType == 'cash' && React.createElement(TextInput, {\n        validate: function validate(value) {\n          return _this2.validateCashPayment(value);\n        },\n        name: \"cash\",\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }), this.state.paymentType == 'points' && React.createElement(TextInput, {\n        validate: function validate(value) {\n          return _this2.validatePointsPayment(value);\n        },\n        name: \"points\",\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }), this.state.paymentType == 'cashAndPoints' && React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(Columns, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(Column, {\n        isSize: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(TextInput, {\n        validate: function validate() {\n          return _this2.state.validSplitPayment;\n        },\n        name: \"cashHalf\",\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      })), React.createElement(Column, {\n        isSize: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(TextInput, {\n        validate: function validate() {\n          return _this2.state.validSplitPayment;\n        },\n        name: \"pointsHalf\",\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }))))));\n    }\n  }]);\n\n  return PaymentForm;\n}(Component)) || _class;\n\nPaymentForm.PropTypes = {\n  totalAmount: PropTypes.number,\n  clientPoints: PropTypes.number,\n  onChange: PropTypes.func\n};\nPaymentForm.defaultProps = {\n  totalAmount: 0,\n  clientPoints: 0,\n  onChange: null\n};\nexport default withStore(PaymentForm);","map":{"version":3,"sources":["/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/src/components/Payments/PaymentForm.jsx"],"names":["React","Component","PropTypes","Field","Text","TextInput","Columns","Column","withStore","observer","translate","priceRegex","PaymentForm","props","state","paymentType","cashHalf","pointsHalf","validSplitPayment","handleChange","bind","text","store","ui","language","type","setState","value","test","totalAmount","clientPoints","sender","name","valid","onChange","prevProps","prevState","validateCashPayment","validatePointsPayment","getText","handlePaymentType","number","func","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './styles.css'\n\nimport {\n  Field,\n  Text,\n  TextInput\n} from 'shipnow-mercurio';\n\nimport {\n  Columns,\n  Column\n} from 'bloomer';\n\nimport { withStore } from '../../hocs';\n\nimport { observer } from 'mobx-react';\n\nimport { translate } from '../../lib/Translator';\n\nimport { priceRegex } from '../../lib/Regex'\n\n@observer\nclass PaymentForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      paymentType: '',\n      cashHalf: 0,\n      pointsHalf: 0,\n      validSplitPayment: false\n    }\n\n    this.handleChange        = this.handleChange.bind(this);\n  }\n\n  getText( text ) {\n    return translate(text, this.props.store.ui.language)\n  }\n\n  handlePaymentType( type ){\n    this.setState({\n      paymentType: type\n    })\n  }\n\n  //ver como se agregan mensajes al validar algo\n  validateCashPayment( value ){\n    return priceRegex.test(value) && value <= this.props.totalAmount\n  }\n\n  validatePointsPayment( value ){\n    //una vez que tengamos conversion, validar que no se este excediendo del monto total\n    return priceRegex.test(value) && value <= this.props.clientPoints\n  }\n\n  handleChange(sender, value, name, valid){\n    if(name =='cashHalf'){\n      this.setState({\n        cashHalf: value\n      })\n    }\n    if(name =='pointsHalf'){\n      this.setState({\n        pointsHalf: value\n      })\n    }\n    \n    this.props.onChange && this.props.onChange(sender, value, name, valid)    \n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.cashHalf != this.state.cashHalf || prevState.pointsHalf != this.state.pointsHalf ) {\n      this.setState({\n        validSplitPayment: this.validateCashPayment( this.state.cashHalf ) && this.validatePointsPayment( this.state.pointsHalf )\n      })\n    }\n  }\n\n  render() {\n    return(\n      <React.Fragment>\n        <Field label={ this.getText('Tipo de pago') } labelNote={ this.getText('¿De qué manera desea realizar el pago?') } size=\"lg\">\n          <Text className=\"ml-1 mt-2\" weight=\"medium\" size=\"lg\">\n              <input \n                className=\"ml-1 mr-1\" \n                type=\"radio\" \n                value=\"loaned\" \n                onChange={ () => (this.handlePaymentType('loaned')) }\n                checked={ this.state.paymentType == 'loaned'} />\n              { this.getText('Fiado') }\n          </Text>\n          <Text className=\"ml-1 mt-2\" size=\"lg\" weight=\"medium\">\n              <input \n                className=\"ml-1 mr-1\" \n                type=\"radio\" \n                value=\"cash\" \n                onChange={ () => (this.handlePaymentType('cash')) }\n                checked={ this.state.paymentType == 'cash'} />\n              { this.getText('Efectivo') }\n          </Text>\n          <Text className=\"ml-1 mt-2\" size=\"lg\" weight=\"medium\">\n              <input \n                className=\"ml-1 mr-1\" \n                type=\"radio\" \n                value=\"points\" \n                onChange={ () => (this.handlePaymentType('points')) }\n                checked={ this.state.paymentType == 'points'} />\n              { this.getText('Puntos') }\n          </Text>\n          <Text className=\"ml-1 mt-2\" size=\"lg\" weight=\"medium\">\n              <input \n                className=\"ml-1 mr-1\" \n                type=\"radio\" \n                value=\"cashAndPoints\" \n                onChange={ () => (this.handlePaymentType('cashAndPoints')) }\n                checked={ this.state.paymentType == 'cashAndPoints'} />\n              { this.getText('Efectivo y puntos') }\n          </Text>\n        </Field>\n        {this.state.paymentType != '' && this.state.paymentType != 'loaned' &&\n        <Field label={ this.getText('Ingrese los montos') } labelNote={ this.getText('¿Cuánto va abonar?') }>\n\n         {this.state.paymentType == 'cash' && \n         <TextInput validate={ (value) => (this.validateCashPayment(value)) } name=\"cash\" onChange={ this.handleChange }/>}\n\n         {this.state.paymentType == 'points' && \n         <TextInput validate={ (value) => (this.validatePointsPayment(value)) } name=\"points\" onChange={ this.handleChange }/>}\n         \n         {this.state.paymentType == 'cashAndPoints' && \n          <React.Fragment>\n            <Columns>\n              <Column isSize={ 6 }>\n                <TextInput validate={ () => this.state.validSplitPayment } name=\"cashHalf\" onChange={ this.handleChange }/>\n              </Column>\n              <Column isSize={ 6 }>\n                <TextInput validate={ () => this.state.validSplitPayment } name=\"pointsHalf\" onChange={ this.handleChange }/>\n              </Column>\n            </Columns>\n          </React.Fragment>}\n\n        </Field>}\n      </React.Fragment> )\n  }\n}\n\nPaymentForm.PropTypes = {\n  totalAmount: PropTypes.number,\n  clientPoints: PropTypes.number,\n  onChange: PropTypes.func\n}\n\nPaymentForm.defaultProps = {\n  totalAmount: 0,\n  clientPoints: 0,\n  onChange: null\n}\n\nexport default withStore(PaymentForm);"]},"metadata":{},"sourceType":"module"}