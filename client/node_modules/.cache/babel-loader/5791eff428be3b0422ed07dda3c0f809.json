{"ast":null,"code":"import _classCallCheck from \"/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _applyDecoratedDescriptor from \"/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\n\nvar _class;\n\nimport { Model } from '../lib';\nimport { action, computed } from 'mobx';\nimport moment from 'moment';\nimport startCase from 'lodash/startCase';\nimport { Service, User, Professional, Client, Branch } from '../models';\nimport { ServicesStore, UsersStore, ProfessionalsStore, ClientsStore, BranchesStore } from '../stores';\nvar Appointment = (_class =\n/*#__PURE__*/\nfunction (_Model) {\n  _inherits(Appointment, _Model);\n\n  function Appointment(attributes, store) {\n    _classCallCheck(this, Appointment);\n\n    var defaultAttributes = {\n      local: '',\n      branch: null,\n      status: \"OPEN\",\n      professional: null,\n      client: null,\n      dayHour: moment(),\n      services: []\n    };\n    var attrs = Object.assign(defaultAttributes, attributes);\n    return _possibleConstructorReturn(this, _getPrototypeOf(Appointment).call(this, attrs, store));\n  }\n\n  _createClass(Appointment, [{\n    key: \"afterSetData\",\n    value: function afterSetData() {\n      var _this = this;\n\n      if (this.dayHour) {\n        this.dayHour = moment(this.dayHour);\n      }\n\n      if (this.client) {\n        this.client = new Client(this.client, ClientsStore);\n      }\n\n      if (this.professional) {\n        this.professional = new Professional(this.professional, ProfessionalsStore);\n      }\n\n      if (this.users) {\n        this.user = new User(this.user, UsersStore);\n      }\n\n      if (this.services) {\n        var modeledServices = [];\n        this.services.forEach(function (service) {\n          modeledServices.push(new Service(service, ServicesStore));\n        });\n        this.services = modeledServices;\n      }\n\n      if (this.branch) {\n        this.appStore.stores.get('branches').get(this.branch.id).andThen(function (branch) {\n          _this.branch = branch;\n        });\n      }\n    }\n  }, {\n    key: \"setStatus\",\n    value: function setStatus(status) {\n      this.beginUpdate();\n      this.status.name = status;\n      this.endUpdate();\n      return this;\n    }\n  }, {\n    key: \"pay\",\n    value: function pay() {\n      return this.appStore.APIClient.sendRequest(\"/appointments/\".concat(this.id, \"/paid\"), 'POST');\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      return this.appStore.APIClient.sendRequest(\"/appointments/\".concat(this.id, \"/cancel\"), 'POST');\n    }\n  }, {\n    key: \"pay\",\n    value: function pay() {\n      return this.appStore.APIClient.sendRequest(\"/appointments/\".concat(this.id, \"/paid\"), 'POST');\n    }\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      if (this.client instanceof Object) {\n        this.client = this.client.id;\n      }\n\n      if (this.professional instanceof Object) {\n        this.professional = this.professional.id;\n      }\n\n      var cleanServices = [];\n      this.services.forEach(function (service) {\n        if (service instanceof Object) {\n          cleanServices.push(service.id);\n        } else {\n          cleanServices.push(service);\n        }\n      });\n      this.services = cleanServices;\n      return this;\n    }\n  }, {\n    key: \"clientFullName\",\n    get: function get() {\n      if (!this.client) {\n        return '';\n      }\n\n      return \"\".concat(startCase(this.client.name), \" \").concat(startCase(this.client.lastname));\n    }\n  }, {\n    key: \"clientPoints\",\n    get: function get() {\n      if (!this.client) {\n        return '';\n      }\n\n      return this.client.points;\n    }\n  }, {\n    key: \"professionalFullName\",\n    get: function get() {\n      if (!this.professional) {\n        return '';\n      }\n\n      return \"\".concat(startCase(this.professional.name), \" \").concat(startCase(this.professional.lastName));\n    }\n  }, {\n    key: \"clientID\",\n    get: function get() {\n      if (!this.client) {\n        return '';\n      }\n\n      return this.client.id;\n    }\n  }, {\n    key: \"totalPrice\",\n    get: function get() {\n      var total = 0;\n\n      if (!this.services || this.services.length == 0) {\n        return 0;\n      }\n\n      this.services.map(function (service) {\n        return total += parseInt(service.price);\n      });\n      return total;\n    }\n  }, {\n    key: \"isOpen\",\n    get: function get() {\n      return this.status.name === 'OPEN';\n    }\n  }, {\n    key: \"isPaid\",\n    get: function get() {\n      return this.status.name === 'PAID';\n    }\n  }, {\n    key: \"isCancelled\",\n    get: function get() {\n      return this.status.name === 'CANCELED';\n    }\n  }, {\n    key: \"isExpired\",\n    get: function get() {\n      return this.status.name === 'EXPIRED';\n    }\n  }, {\n    key: \"statusClassName\",\n    get: function get() {\n      var classNames = {\n        'OPEN': 'open',\n        'PAID': 'approved',\n        'CANCELED': 'cancelled',\n        'EXPIRED': 'cancelled',\n        'PARTIAL_PAID': 'warning'\n      };\n      return classNames[this.status.name];\n    }\n  }, {\n    key: \"cookedStatus\",\n    get: function get() {\n      var statuses = {\n        'OPEN': 'Activo',\n        'PAID': 'Pagado',\n        'CANCELED': 'Cancelado',\n        'EXPIRED': 'Ausente',\n        'PARTIAL_PAID': 'Pagado parcialmente'\n      };\n      return statuses[this.status.name];\n    }\n  }, {\n    key: \"beginningTime\",\n    get: function get() {\n      return this.dayHour.format(\"HH:mm\");\n    }\n  }, {\n    key: \"finishTime\",\n    get: function get() {\n      var totalDuration = 0;\n      this.services.map(function (service) {\n        return totalDuration += service.duration;\n      });\n      return moment(this.dayHour).add(totalDuration, 'minutes').format(\"HH:mm\");\n    }\n  }, {\n    key: \"servicesIds\",\n    get: function get() {\n      var ret = [];\n      this.services.map(function (service) {\n        return ret.push(service.id);\n      });\n      return ret;\n    }\n  }]);\n\n  return Appointment;\n}(Model), (_applyDecoratedDescriptor(_class.prototype, \"setStatus\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setStatus\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"clientFullName\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"clientFullName\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"clientPoints\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"clientPoints\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"professionalFullName\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"professionalFullName\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"clientID\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"clientID\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"totalPrice\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"totalPrice\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isOpen\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isOpen\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isPaid\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isPaid\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isCancelled\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isCancelled\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isExpired\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isExpired\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"statusClassName\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"statusClassName\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"pay\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"pay\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"cancel\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"cancel\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"pay\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"pay\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"clean\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"clean\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"cookedStatus\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"cookedStatus\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"beginningTime\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"beginningTime\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"finishTime\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"finishTime\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"servicesIds\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"servicesIds\"), _class.prototype)), _class);\nexport { Appointment as default };","map":{"version":3,"sources":["/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/src/models/Appointment.js"],"names":["Model","action","computed","moment","startCase","Service","User","Professional","Client","Branch","ServicesStore","UsersStore","ProfessionalsStore","ClientsStore","BranchesStore","Appointment","attributes","store","defaultAttributes","local","branch","status","professional","client","dayHour","services","attrs","Object","assign","users","user","modeledServices","forEach","service","push","appStore","stores","get","id","andThen","beginUpdate","name","endUpdate","APIClient","sendRequest","cleanServices","lastname","points","lastName","total","length","map","parseInt","price","classNames","statuses","format","totalDuration","duration","add","ret"],"mappings":"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","sourcesContent":["import { Model } from '../lib';\n\nimport {\n  action,\n  computed,\n} from 'mobx'\n\nimport moment from 'moment';\nimport startCase from 'lodash/startCase';\n\nimport { Service, User, Professional, Client, Branch } from '../models';\nimport { ServicesStore, UsersStore, ProfessionalsStore, ClientsStore, BranchesStore } from '../stores';\n\nexport default class Appointment extends Model {\n  constructor( attributes, store ) {\n\n    let defaultAttributes = {\n      local: '',\n      branch: null,\n      status: \"OPEN\",\n      professional: null,\n      client: null,\n      dayHour: moment(),\n      services: [], \n    };\n    \n    let attrs = Object.assign( defaultAttributes, attributes );\n    \n    super(attrs, store);\n    \n  }\n  \n  afterSetData() {\n    if (this.dayHour) {\n      this.dayHour = moment(this.dayHour);\n    }\n    if (this.client) {\n      this.client = new Client(this.client, ClientsStore);\n    }\n    if (this.professional) {\n      this.professional = new Professional(this.professional, ProfessionalsStore);\n    }\n    if (this.users) {\n      this.user = new User(this.user, UsersStore);\n    }\n    if (this.services) {\n      const modeledServices = [];\n      this.services.forEach( service => {\n        modeledServices.push(new Service(service, ServicesStore));\n      });\n      this.services = modeledServices;\n    }\n    if (this.branch) {\n      this.appStore.stores.get('branches').get(this.branch.id).andThen( branch => {\n        this.branch = branch;\n      })\n    }\n  }\n\n  @action\n  setStatus( status ) {\n    this.beginUpdate();\n    this.status.name = status;\n    this.endUpdate();\n    return this;  \n  }\n\n  @computed\n  get clientFullName() {\n    if (!this.client) {\n      return '';\n    }\n    return `${ startCase(this.client.name) } ${ startCase(this.client.lastname) }`\n  }\n\n  @computed\n  get clientPoints() {\n    if (!this.client) {\n      return '';\n    }\n    return this.client.points\n  }\n\n  @computed\n  get professionalFullName() {\n    if (!this.professional) {\n      return '';\n    }\n    return `${ startCase(this.professional.name) } ${ startCase(this.professional.lastName) }`;\n  }\n\n  @computed\n  get clientID() {\n    if (!this.client) {\n      return '';\n    }\n    return this.client.id\n  }\n\n  @computed\n  get totalPrice() {\n    let total = 0;\n    if (!this.services || this.services.length == 0) {\n      return 0;\n    }\n\n    this.services.map( service => ( total += parseInt(service.price) ));\n    return total;\n  }\n\n  @computed\n  get isOpen() {\n    return this.status.name === 'OPEN';\n  }\n\n  @computed\n  get isPaid() {\n    return this.status.name === 'PAID';\n  }\n\n  @computed\n  get isCancelled() {\n    return this.status.name === 'CANCELED';\n  }\n\n  @computed\n  get isExpired() {\n    return this.status.name === 'EXPIRED';\n  }\n\n  @computed\n  get statusClassName() {\n    const classNames = {\n      'OPEN': 'open',\n      'PAID': 'approved',\n      'CANCELED': 'cancelled',\n      'EXPIRED': 'cancelled',\n      'PARTIAL_PAID': 'warning',\n    }\n    return classNames[this.status.name];\n  }\n\n  @action\n  pay() {\n    return this.appStore.APIClient.sendRequest(`/appointments/${ this.id }/paid`, 'POST')\n  }\n\n  @action\n  cancel() {\n    return this.appStore.APIClient.sendRequest(`/appointments/${ this.id }/cancel`, 'POST');\n  }\n\n  @action\n  pay() {\n    return this.appStore.APIClient.sendRequest(`/appointments/${ this.id }/paid`, 'POST')\n  }\n\n  @action \n  clean() {\n    if (this.client instanceof Object) {\n      this.client = this.client.id\n    }\n    if (this.professional instanceof Object) {\n      this.professional = this.professional.id;\n    }\n    const cleanServices = [];\n    this.services.forEach( service => {\n      if (service instanceof Object) {\n        cleanServices.push(service.id)\n      }\n      else {\n        cleanServices.push(service)\n      }\n    });\n    this.services = cleanServices;\n    return this;\n  }\n\n  @computed\n  get cookedStatus() {\n    const statuses = {\n      'OPEN': 'Activo',\n      'PAID': 'Pagado',\n      'CANCELED': 'Cancelado',\n      'EXPIRED': 'Ausente',\n      'PARTIAL_PAID': 'Pagado parcialmente'\n    }\n    return statuses[this.status.name];\n  }\n\n  @computed\n  get beginningTime() {\n    return this.dayHour.format(\"HH:mm\")\n  }\n\n  @computed\n  get finishTime() {\n    let totalDuration = 0;\n    this.services.map( service => (totalDuration += service.duration));\n\n    return moment(this.dayHour).add(totalDuration, 'minutes').format(\"HH:mm\");\n  }\n\n  @computed\n  get servicesIds() {\n    const ret = [];\n    this.services.map( service => (ret.push(service.id)))\n    return ret;\n  }\n\n}"]},"metadata":{},"sourceType":"module"}