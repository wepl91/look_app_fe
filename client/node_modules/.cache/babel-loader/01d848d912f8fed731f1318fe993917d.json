{"ast":null,"code":"import _classCallCheck from \"/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _applyDecoratedDescriptor from \"/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\n\nvar _class;\n\nimport { Model } from '../lib';\nimport { action, computed } from 'mobx';\nimport moment from 'moment';\nimport startCase from 'lodash/startCase';\nimport { Service, User, Professional, Client, Branch } from '../models';\nimport { ServicesStore, UsersStore, ProfessionalsStore, ClientsStore, BranchesStore } from '../stores';\nimport MiddleClient from '../lib/MiddleClient';\nvar Appointment = (_class =\n/*#__PURE__*/\nfunction (_Model) {\n  _inherits(Appointment, _Model);\n\n  function Appointment(attributes, store) {\n    _classCallCheck(this, Appointment);\n\n    var defaultAttributes = {\n      local: '',\n      branch: null,\n      status: \"OPEN\",\n      professional: null,\n      client: null,\n      dayHour: moment(),\n      services: []\n    };\n    var attrs = Object.assign(defaultAttributes, attributes);\n    return _possibleConstructorReturn(this, _getPrototypeOf(Appointment).call(this, attrs, store));\n  }\n\n  _createClass(Appointment, [{\n    key: \"afterSetData\",\n    value: function afterSetData() {\n      if (this.dayHour) {\n        this.dayHour = moment(this.dayHour);\n      }\n\n      if (this.client) {\n        this.client = new Client(this.client, ClientsStore);\n      }\n\n      if (this.professional) {\n        this.professional = new Professional(this.professional, ProfessionalsStore);\n      }\n\n      if (this.users) {\n        this.user = new User(this.user, UsersStore);\n      }\n\n      if (this.services) {\n        var modeledServices = [];\n        this.services.forEach(function (service) {\n          modeledServices.push(new Service(service, ServicesStore));\n        });\n        this.services = modeledServices;\n      }\n\n      if (this.branch) {\n        this.branch = new Branch(this.branch, BranchesStore);\n      }\n    }\n  }, {\n    key: \"setStatus\",\n    value: function setStatus(status) {\n      this.beginUpdate();\n      this.status.name = status;\n      this.endUpdate();\n      return this;\n    }\n  }, {\n    key: \"pay\",\n    value: function pay() {\n      var money = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var points = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var params = {};\n\n      if (money) {\n        params['amount'] = parseInt(money, 10);\n      } else {\n        params['amount'] = 0;\n      }\n\n      if (points) {\n        params['points'] = parseInt(points, 10);\n      }\n\n      params['appointmentId'] = parseInt(this.id, 10);\n      params['clientId'] = parseInt(this.clientID, 10);\n      params['currency'] = 'ARS';\n      debugger;\n      return this.appStore.APIClient.sendRequest(\"/appointments/\".concat(this.id, \"/pay\"), 'POST', params);\n    }\n  }, {\n    key: \"loan\",\n    value: function loan() {\n      return this.appStore.APIClient.sendRequest(\"/appointments/\".concat(this.id, \"/pending\"), 'POST');\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      return this.appStore.APIClient.sendRequest(\"/appointments/\".concat(this.id, \"/cancel\"), 'POST');\n    }\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      if (this.client instanceof Object) {\n        this.client = this.client.id;\n      }\n\n      if (this.branch instanceof Object) {\n        this.branch = this.branch.id;\n      }\n\n      if (this.professional instanceof Object) {\n        this.professional = this.professional.id;\n      }\n\n      var cleanServices = [];\n      this.services.forEach(function (service) {\n        if (service instanceof Object) {\n          cleanServices.push(service.id);\n        } else {\n          cleanServices.push(service);\n        }\n      });\n      this.services = cleanServices;\n      return this;\n    }\n  }, {\n    key: \"sendInvite\",\n    value: function sendInvite() {\n      //If there is no client or client has no email or email client is not gmail domain, we do not send invite\n      if (!this.client || !this.client.email || !this.client.email.includes('gmail.com')) {\n        return;\n      }\n\n      var middleClient = new MiddleClient();\n      var data = {};\n      data['location'] = this.branch.cookedAddress;\n      data['participants'] = [{\n        email: this.client.email\n      }];\n      data['description'] = \"Los servicios que se realizar\\xE1n son: \".concat(this.servicesNames);\n      data['to_hour'] = moment(this.finishHour).unix();\n      data['from_hour'] = moment(this.dayHour).unix();\n      return middleClient.sendInvite(data);\n    }\n  }, {\n    key: \"clientFullName\",\n    get: function get() {\n      if (!this.client) {\n        return '';\n      }\n\n      return \"\".concat(startCase(this.client.name), \" \").concat(startCase(this.client.lastname));\n    }\n  }, {\n    key: \"clientPoints\",\n    get: function get() {\n      if (!this.client) {\n        return '';\n      }\n\n      return this.client.points;\n    }\n  }, {\n    key: \"professionalFullName\",\n    get: function get() {\n      if (!this.professional) {\n        return '';\n      }\n\n      return \"\".concat(startCase(this.professional.name), \" \").concat(startCase(this.professional.lastName));\n    }\n  }, {\n    key: \"clientID\",\n    get: function get() {\n      if (!this.client) {\n        return '';\n      }\n\n      return this.client.id;\n    }\n  }, {\n    key: \"totalPrice\",\n    get: function get() {\n      var total = 0;\n\n      if (!this.services || this.services.length == 0) {\n        return 0;\n      }\n\n      this.services.map(function (service) {\n        return total += parseInt(service.price);\n      });\n      return parseFloat(total);\n    }\n  }, {\n    key: \"isOpen\",\n    get: function get() {\n      return this.status.name === 'OPEN';\n    }\n  }, {\n    key: \"isPartialPaid\",\n    get: function get() {\n      return this.status.name == 'PARTIAL_PAID' || this.status.name == 'PENDING_PAID';\n    }\n  }, {\n    key: \"isTrustworthy\",\n    get: function get() {\n      return this.status.name == 'PENDING_PAID';\n    }\n  }, {\n    key: \"isPaid\",\n    get: function get() {\n      return this.status.name === 'PAID';\n    }\n  }, {\n    key: \"isCancelled\",\n    get: function get() {\n      return this.status.name === 'CANCELED';\n    }\n  }, {\n    key: \"isExpired\",\n    get: function get() {\n      return this.status.name === 'EXPIRED';\n    }\n  }, {\n    key: \"statusClassName\",\n    get: function get() {\n      var classNames = {\n        'OPEN': 'open',\n        'PAID': 'approved',\n        'CANCELED': 'cancelled',\n        'EXPIRED': 'cancelled',\n        'PARTIAL_PAID': 'warning',\n        'PENDING_PAID': 'warning'\n      };\n      return classNames[this.status.name];\n    }\n  }, {\n    key: \"cookedStatus\",\n    get: function get() {\n      var statuses = {\n        'OPEN': 'Activo',\n        'PAID': 'Pagado',\n        'CANCELED': 'Cancelado',\n        'EXPIRED': 'Ausente',\n        'PARTIAL_PAID': 'Pagado parcialmente',\n        'PENDING_PAID': 'Pago pendiente'\n      };\n      return statuses[this.status.name];\n    }\n  }, {\n    key: \"beginningTime\",\n    get: function get() {\n      return this.dayHour.format(\"HH:mm\");\n    }\n  }, {\n    key: \"finishTime\",\n    get: function get() {\n      var totalDuration = 0;\n      this.services.map(function (service) {\n        return totalDuration += service.duration;\n      });\n      return moment(this.dayHour).add(totalDuration, 'minutes').format(\"HH:mm\");\n    }\n  }, {\n    key: \"finishHour\",\n    get: function get() {\n      var totalDuration = 0;\n      this.services.map(function (service) {\n        return totalDuration += service.duration;\n      });\n      return moment(this.dayHour).add(totalDuration, 'minutes');\n    }\n  }, {\n    key: \"servicesIds\",\n    get: function get() {\n      var ret = [];\n      this.services.map(function (service) {\n        return ret.push(service.id);\n      });\n      return ret;\n    }\n  }, {\n    key: \"servicesNames\",\n    get: function get() {\n      var ret = [];\n      this.services.forEach(function (service) {\n        ret.push(startCase(service.name));\n      });\n      return ret;\n    }\n  }]);\n\n  return Appointment;\n}(Model), (_applyDecoratedDescriptor(_class.prototype, \"setStatus\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setStatus\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"clientFullName\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"clientFullName\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"clientPoints\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"clientPoints\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"professionalFullName\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"professionalFullName\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"clientID\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"clientID\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"totalPrice\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"totalPrice\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isOpen\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isOpen\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isPartialPaid\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isPartialPaid\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isTrustworthy\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isTrustworthy\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isPaid\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isPaid\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isCancelled\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isCancelled\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"isExpired\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"isExpired\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"statusClassName\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"statusClassName\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"pay\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"pay\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"loan\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"loan\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"cancel\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"cancel\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"clean\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"clean\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"cookedStatus\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"cookedStatus\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"beginningTime\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"beginningTime\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"finishTime\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"finishTime\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"finishHour\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"finishHour\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"servicesIds\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"servicesIds\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"servicesNames\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"servicesNames\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"sendInvite\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"sendInvite\"), _class.prototype)), _class);\nexport { Appointment as default };","map":{"version":3,"sources":["/Users/wpereyra/Documents/Universidad/PP1/look_app_fe/client/src/models/Appointment.js"],"names":["Model","action","computed","moment","startCase","Service","User","Professional","Client","Branch","ServicesStore","UsersStore","ProfessionalsStore","ClientsStore","BranchesStore","MiddleClient","Appointment","attributes","store","defaultAttributes","local","branch","status","professional","client","dayHour","services","attrs","Object","assign","users","user","modeledServices","forEach","service","push","beginUpdate","name","endUpdate","money","points","params","parseInt","id","clientID","appStore","APIClient","sendRequest","cleanServices","email","includes","middleClient","data","cookedAddress","servicesNames","finishHour","unix","sendInvite","lastname","lastName","total","length","map","price","parseFloat","classNames","statuses","format","totalDuration","duration","add","ret"],"mappings":"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","sourcesContent":["import { Model } from '../lib';\n\nimport {\n  action,\n  computed,\n} from 'mobx'\n\nimport moment from 'moment';\nimport startCase from 'lodash/startCase';\n\nimport { Service, User, Professional, Client, Branch } from '../models';\nimport { ServicesStore, UsersStore, ProfessionalsStore, ClientsStore, BranchesStore } from '../stores';\n\nimport MiddleClient from '../lib/MiddleClient';\n\nexport default class Appointment extends Model {\n  constructor( attributes, store ) {\n\n    let defaultAttributes = {\n      local: '',\n      branch: null,\n      status: \"OPEN\",\n      professional: null,\n      client: null,\n      dayHour: moment(),\n      services: [], \n    };\n    \n    let attrs = Object.assign( defaultAttributes, attributes );\n    \n    super(attrs, store);\n    \n  }\n  \n  afterSetData() {\n    if (this.dayHour) {\n      this.dayHour = moment(this.dayHour);\n    }\n    if (this.client) {\n      this.client = new Client(this.client, ClientsStore);\n    }\n    if (this.professional) {\n      this.professional = new Professional(this.professional, ProfessionalsStore);\n    }\n    if (this.users) {\n      this.user = new User(this.user, UsersStore);\n    }\n    if (this.services) {\n      const modeledServices = [];\n      this.services.forEach( service => {\n        modeledServices.push(new Service(service, ServicesStore));\n      });\n      this.services = modeledServices;\n    }\n    if (this.branch) {\n      this.branch = new Branch(this.branch, BranchesStore);\n    }\n  }\n\n  @action\n  setStatus( status ) {\n    this.beginUpdate();\n    this.status.name = status;\n    this.endUpdate();\n    return this;  \n  }\n\n  @computed\n  get clientFullName() {\n    if (!this.client) {\n      return '';\n    }\n    return `${ startCase(this.client.name) } ${ startCase(this.client.lastname) }`\n  }\n\n  @computed\n  get clientPoints() {\n    if (!this.client) {\n      return '';\n    }\n    return this.client.points\n  }\n\n  @computed\n  get professionalFullName() {\n    if (!this.professional) {\n      return '';\n    }\n    return `${ startCase(this.professional.name) } ${ startCase(this.professional.lastName) }`;\n  }\n\n  @computed\n  get clientID() {\n    if (!this.client) {\n      return '';\n    }\n    return this.client.id\n  }\n\n  @computed\n  get totalPrice() {\n    let total = 0;\n    if (!this.services || this.services.length == 0) {\n      return 0;\n    }\n\n    this.services.map( service => ( total += parseInt(service.price) ));\n    return parseFloat(total);\n  }\n\n  @computed\n  get isOpen() {\n    return this.status.name === 'OPEN';\n  }\n\n  @computed\n  get isPartialPaid() {\n    return this.status.name == 'PARTIAL_PAID' || this.status.name == 'PENDING_PAID'\n  }\n\n  @computed\n  get isTrustworthy() {\n    return this.status.name == 'PENDING_PAID';\n  }\n\n  @computed\n  get isPaid() {\n    return this.status.name === 'PAID';\n  }\n\n  @computed\n  get isCancelled() {\n    return this.status.name === 'CANCELED';\n  }\n\n  @computed\n  get isExpired() {\n    return this.status.name === 'EXPIRED';\n  }\n\n  @computed\n  get statusClassName() {\n    const classNames = {\n      'OPEN': 'open',\n      'PAID': 'approved',\n      'CANCELED': 'cancelled',\n      'EXPIRED': 'cancelled',\n      'PARTIAL_PAID': 'warning',\n      'PENDING_PAID': 'warning',\n    }\n    return classNames[this.status.name];\n  }\n\n  @action\n  pay(money = null, points = null) {\n    let params = {};\n    if (money) {\n      params['amount'] = parseInt(money,10);\n    }\n    else {\n      params['amount'] = 0;\n    }\n    if (points) {\n      params['points'] = parseInt(points,10);\n    }\n    params['appointmentId'] = parseInt(this.id,10);\n    params['clientId'] = parseInt(this.clientID,10);\n    params['currency'] = 'ARS';\n    debugger\n    return this.appStore.APIClient.sendRequest(`/appointments/${ this.id }/pay`, 'POST', params);\n  }\n\n  @action\n  loan() {\n    return this.appStore.APIClient.sendRequest(`/appointments/${ this.id }/pending`, 'POST');\n  }\n\n  @action\n  cancel() {\n    return this.appStore.APIClient.sendRequest(`/appointments/${ this.id }/cancel`, 'POST');\n  }\n\n  @action \n  clean() {\n    if (this.client instanceof Object) {\n      this.client = this.client.id\n    }\n    if (this.branch instanceof Object) {\n      this.branch = this.branch.id\n    }\n    if (this.professional instanceof Object) {\n      this.professional = this.professional.id;\n    }\n    const cleanServices = [];\n    this.services.forEach( service => {\n      if (service instanceof Object) {\n        cleanServices.push(service.id)\n      }\n      else {\n        cleanServices.push(service)\n      }\n    });\n    this.services = cleanServices;\n    return this;\n  }\n\n  @computed\n  get cookedStatus() {\n    const statuses = {\n      'OPEN': 'Activo',\n      'PAID': 'Pagado',\n      'CANCELED': 'Cancelado',\n      'EXPIRED': 'Ausente',\n      'PARTIAL_PAID': 'Pagado parcialmente',\n      'PENDING_PAID': 'Pago pendiente'\n    }\n    return statuses[this.status.name];\n  }\n\n  @computed\n  get beginningTime() {\n    return this.dayHour.format(\"HH:mm\")\n  }\n\n  @computed\n  get finishTime() {\n    let totalDuration = 0;\n    this.services.map( service => (totalDuration += service.duration));\n\n    return moment(this.dayHour).add(totalDuration, 'minutes').format(\"HH:mm\");\n  }\n\n  @computed\n  get finishHour() {\n    let totalDuration = 0;\n    this.services.map( service => (totalDuration += service.duration));\n\n    return moment(this.dayHour).add(totalDuration, 'minutes');\n  }\n\n  @computed\n  get servicesIds() {\n    const ret = [];\n    this.services.map( service => (ret.push(service.id)))\n    return ret;\n  }\n\n  @computed\n  get servicesNames() {\n    const ret = [];\n    this.services.forEach( service => {\n      ret.push(startCase(service.name));\n    });\n    return ret;\n  }\n\n  @action\n  sendInvite() {\n    //If there is no client or client has no email or email client is not gmail domain, we do not send invite\n    if (!this.client || !this.client.email || !this.client.email.includes('gmail.com')) {\n      return;\n    }\n    const middleClient = new MiddleClient();\n    const data = {};\n    data['location'] = this.branch.cookedAddress;\n    data['participants'] = [{email: this.client.email}];\n    data['description'] = `Los servicios que se realizarán son: ${ this.servicesNames }`;\n    data['to_hour'] = moment(this.finishHour).unix();\n    data['from_hour'] = moment(this.dayHour).unix();\n\n    return middleClient.sendInvite(data);\n  }\n}"]},"metadata":{},"sourceType":"module"}